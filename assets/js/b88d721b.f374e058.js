"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[269],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>h});var s=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function r(e,t){if(null==e)return{};var n,s,a=function(e,t){if(null==e)return{};var n,s,a={},o=Object.keys(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(s=0;s<o.length;s++)n=o[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,d=r(e,["components","mdxType","originalType","parentName"]),u=p(n),h=a,m=u["".concat(l,".").concat(h)]||u[h]||c[h]||o;return n?s.createElement(m,i(i({ref:t},d),{},{components:n})):s.createElement(m,i({ref:t},d))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=u;var r={};for(var l in t)hasOwnProperty.call(t,l)&&(r[l]=t[l]);r.originalType=e,r.mdxType="string"==typeof e?e:a,i[1]=r;for(var p=2;p<o;p++)i[p]=n[p];return s.createElement.apply(null,i)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6714:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>o,metadata:()=>r,toc:()=>p});var s=n(7462),a=(n(7294),n(3905));const o={title:"Advanced Techniques",slug:"/advanced-techniques"},i=void 0,r={unversionedId:"advanced-techniques",id:"advanced-techniques",title:"Advanced Techniques",description:"Seeding the Database",source:"@site/docs/advanced-techniques.md",sourceDirName:".",slug:"/advanced-techniques",permalink:"/cypress-api-testing-workshop/advanced-techniques",draft:!1,tags:[],version:"current",frontMatter:{title:"Advanced Techniques",slug:"/advanced-techniques"},sidebar:"tutorialSidebar",previous:{title:"CRUD",permalink:"/cypress-api-testing-workshop/crud"}},l={},p=[{value:"Seeding the Database",id:"seeding-the-database",level:2},{value:"Protecting Routes",id:"protecting-routes",level:2},{value:"Validation",id:"validation",level:2},{value:"Exclude properties",id:"exclude-properties",level:2},{value:"Conclusion",id:"conclusion",level:2}],d={toc:p};function c(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,s.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"seeding-the-database"},"Seeding the Database"),(0,a.kt)("p",null,"The technique we are going to use here is having a method in our API that will\nreset the database back to its initial state. The first thing we will do is have\na method in the ",(0,a.kt)("inlineCode",{parentName:"p"},"MissionsService")," to reset the ArrayDB\u2122\ufe0f:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.service.ts",title:"missions.service.ts"},"reset() {\n  this.missions = [{ ...defaultMission }];\n}\n")),(0,a.kt)("p",null,"Above, we are overriding the array by setting it to an array that only\ncontains the ",(0,a.kt)("inlineCode",{parentName:"p"},"defaultMission"),", just like when the API first initializes."),(0,a.kt)("p",null,"Next, we'll create a method in the controller our tests can call to reset:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.controller.ts",title:"missions.controller.ts"},"@Post('/reset')\nreset() {\n  if (process.env.NODE_ENV === 'test' || process.env.NODE_ENV === 'dev') {\n    this.missionsService.reset();\n  }\n}\n")),(0,a.kt)("p",null,'We\'ll make the method respond to a "POST" request since its changing state\ninside the system. We also check to ensure that the environment is either\n"test" or "dev", as we don\'t want to call this method available in production.\nWe need to update the "start:dev" script in the package file to set the Node\nenvironment.'),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json",metastring:"package.json","package.json":!0},'"start:dev": "NODE_ENV=dev nest start --watch",\n')),(0,a.kt)("p",null,"Make sure you restart the Nest server so the change can take effect."),(0,a.kt)("p",null,"A bit later, we will take a look at how to secure this endpoint even more so that the\ncalling API will need a token to call it."),(0,a.kt)("p",null,"In the tests, we want to ensure that we reseed the database before each\ntest is run. We can use the\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/core-concepts/writing-and-organizing-tests#Test-Structure"},(0,a.kt)("inlineCode",{parentName:"a"},"beforeEach")),"\ntest hook for that. Add the following block inside the ",(0,a.kt)("inlineCode",{parentName:"p"},"describe")," block before\nthe first test:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.cy.ts",title:"missions.cy.ts"},'beforeEach(() => {\n  cy.request({\n    log: false,\n    method: "POST",\n    url: "/missions/reset",\n  });\n  cy.log("seeding db");\n});\n')),(0,a.kt)("p",null,"Above, we use the ",(0,a.kt)("inlineCode",{parentName:"p"},"cy.request()")," command, the built-in command for\nmaking API requests in Cypress. We set logging to false so it doesn't get too\nnoisy in the command log, but we also output a small \"seeding db\" message, so we can see it's happening."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"The technique above is just one strategy for seeding a database for testing,\nthere are many ways to do so, and some will be more appropriate for others in\nyour app. See the Cypress guide on\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/end-to-end-testing/testing-your-app#Seeding-data"},"seeding data"),"\nfor some more info on the subject.")),(0,a.kt)("p",null,"Now you should be able to run the tests over and over again without the state of\nthe previous test is getting in the way."),(0,a.kt)("h2",{id:"protecting-routes"},"Protecting Routes"),(0,a.kt)("p",null,"Above, in the ",(0,a.kt)("inlineCode",{parentName:"p"},"reset()")," method on the controller, we put one safeguard in place\nto ensure the app wasn't in production when trying to reseed the database.\nLet's add another layer of security by requiring the calling client to provide a\ntoken to prove they have access to do a db reseed."),(0,a.kt)("p",null,"To accomplish validating this token, we will use a\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/guards"},"Nest Guard"),", which is a piece of middleware\nwhich Nest can invoke for each HTTP request before passing the request on to the\ncontrollers."),(0,a.kt)("p",null,"First, we will use the CLI to create a guard for us. We'll call it\n",(0,a.kt)("inlineCode",{parentName:"p"},"TestEnvOnly"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"nest g guard TestEnvOnly\n")),(0,a.kt)("p",null,"A guard is another JavaScript class with one required method, ",(0,a.kt)("inlineCode",{parentName:"p"},"canActivate"),".\nThis method determines if the request should be able to proceed through the\npipeline or not by returning a boolean or a promise/observable that yields a\nboolean value."),(0,a.kt)("p",null,"Update the contents of the newly created\n",(0,a.kt)("strong",{parentName:"p"},"src/test-env-only/test-env-only.guard.ts")," file with the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/test-env-only/test-env-only.guard.ts",title:"src/test-env-only/test-env-only.guard.ts"},'import { CanActivate, ExecutionContext, Injectable } from "@nestjs/common";\nimport { Observable } from "rxjs";\n\n@Injectable()\nexport class TestEnvOnlyGuard implements CanActivate {\n  canActivate(\n    context: ExecutionContext\n  ): boolean | Promise<boolean> | Observable<boolean> {\n    const request = context.switchToHttp().getRequest();\n\n    if (!(process.env.NODE_ENV === "test" || process.env.NODE_ENV === "dev")) {\n      return false;\n    }\n\n    if (request.headers.authorization !== "resetcreds") {\n      return false;\n    }\n\n    return true;\n  }\n}\n')),(0,a.kt)("p",null,"In the ",(0,a.kt)("inlineCode",{parentName:"p"},"canActivate")," method, the first thing we do is grab access to the HTTP\nrequest."),(0,a.kt)("p",null,"Next, we move the code to check the environment from the controller ",(0,a.kt)("inlineCode",{parentName:"p"},"reset()"),"\nmethod, and then we check an ",(0,a.kt)("inlineCode",{parentName:"p"},"authorization")," header has the correct token.\nWe are using a simple string here, but this token could be more complex, like a\nJWT or API key that could be validated."),(0,a.kt)("p",null,"If either of the above checks doesn't pass, we return false, instructing Nest\nto end the request and send back a 403 Forbidden status code. We return true if they are both\ngood, and the request will continue to the controller."),(0,a.kt)("p",null,"Unlike when we generated the Nest service and controller, the guard did not\nautomatically get wired up for us in the app module. That's because the way you\nuse guards can either be global or more granular. We only want to apply the\nguard to the ",(0,a.kt)("inlineCode",{parentName:"p"},"reset()")," method, so we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@UseGuards()")," decorator and\npass the ",(0,a.kt)("inlineCode",{parentName:"p"},"TestOnlyGuard")," as a parameter to it:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"@UseGuards(TestEnvOnlyGuard)\n@Post('/reset')\nreset() {\n  this.missionsService.reset();\n}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'UseGuards is imported from "@nestjs/common" TestEnvOnlyGuard is imported from\n"src/test-env-only/test-env-only.guard"')),(0,a.kt)("p",null,"Nest will now use the guard for each request coming into this method."),(0,a.kt)("p",null,'If you try the tests again, you will see them fail because we aren\'t passing the\ntoken on the "reset" request in the ',(0,a.kt)("inlineCode",{parentName:"p"},"beforeEach"),". Update the block to do so:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.cy.ts",title:"missions.cy.ts"},'beforeEach(() => {\n  cy.request({\n    log: false,\n    method: "POST",\n    url: "/missions/reset",\n    headers: {\n      Authorization: "resetcreds",\n    },\n  });\n  cy.log("seeding db");\n});\n')),(0,a.kt)("p",null,"Visit the Nest docs for more ways to bind guards to your application."),(0,a.kt)("admonition",{type:"info"},(0,a.kt)("p",{parentName:"admonition"},"We use a guard here to protect our database, but you will also use guards to\nimplement authentication to validate who users are. They even include some built-in ones to get you up and running quickly. Visit their\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/security/authentication"},"authentication")," guide for more\ninfo.")),(0,a.kt)("h2",{id:"validation"},"Validation"),(0,a.kt)("p",null,"We have a working API to manage our missions. However, we haven't\ndone anything to ensure that the data coming into our system is valid.\nValidating data coming into your system is important because it helps ensure the integrity of your database, helps with security and provides a better developer\nexperience for those consuming your API."),(0,a.kt)("p",null,"Our ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," model is fairly simple, but let us add some validation to it to\nensure that any time one is added or updated, we make sure it's good."),(0,a.kt)("p",null,"First up, a new test to validate that trying to create an invalid module returns\na 400 Bad Request status code, which signifies to the user they did\nsomething wrong with the request. The body of the response will contain helpful\nmessages on what went wrong:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.cy.ts",title:"missions.cy.ts"},'it("when adding an invalid mission, get 400 error", () => {\n  const mission = {};\n  cy.api({\n    method: "POST",\n    url: "/missions",\n    body: mission,\n    failOnStatusCode: false,\n  }).as("response");\n  cy.get("@response").its("status").should("equal", 400);\n  cy.get("@response")\n    .its("body")\n    .should("deep.include", {\n      message: [\n        "description must not be an empty string",\n        "description must be a string",\n        "complete must be a boolean",\n      ],\n    });\n});\n')),(0,a.kt)("p",null,"We will be using a couple of helper libraries to help accomplish this.\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/typestack/class-validator"},"Class Validator")," and\n",(0,a.kt)("a",{parentName:"p",href:"https://github.com/typestack/class-transformer"},"Class Transformer")," are two\nlibraries that fit well in the Nest ecosystem. They allow us to use TypeScript\ndecorators to annotate our models and provide validation logic declaratively."),(0,a.kt)("p",null,"We need to install the libraries. Run the following from your terminal:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i class-transformer class-validator\n")),(0,a.kt)("p",null,"Currently, our ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," model is an interface. To annotate it with\ndecorators, we will need to convert it to a class instead and refactor some\ncode."),(0,a.kt)("p",null,"Create a new file at ",(0,a.kt)("strong",{parentName:"p"},"src/missions/Mission.ts")," and paste the following into\nit:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/missions/Mission.ts",title:"src/missions/Mission.ts"},"export class Mission {\n  id?: number;\n  description: string;\n  complete: boolean;\n  created: string;\n\n  constructor(partial: Partial<Mission>) {\n    Object.assign(this, partial);\n  }\n}\n")),(0,a.kt)("p",null,"Next, delete the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," interface from the top of the ",(0,a.kt)("strong",{parentName:"p"},"missions.service.ts"),"\nfile and reference the new class in both the service and controller."),(0,a.kt)("p",null,"And then, to make sure we are using an instance of the class, update where we\ninitialize the missions array in the service, as well as where it gets reset in\nthe ",(0,a.kt)("inlineCode",{parentName:"p"},"reset()")," method:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.service.ts",title:"missions.service.ts"},"//initialize missions\nmissions: Mission[] = [new Mission(defaultMission)];\n\n//reset\nreset() {\n  this.missions = [new Mission(defaultMission)];\n}\n")),(0,a.kt)("p",null,"Perfect! Now that we have a class, we can begin to decorate the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," class\nwith validation functions. We'll verify that ",(0,a.kt)("inlineCode",{parentName:"p"},"description")," is a string and\nis not empty and that complete is a boolean. To do so, we'll use the\n",(0,a.kt)("inlineCode",{parentName:"p"},"@IsString()"),", ",(0,a.kt)("inlineCode",{parentName:"p"},"@IsNotEmpty()"),", and ",(0,a.kt)("inlineCode",{parentName:"p"},"@IsBoolean()")," decorators. Update the\n",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," class and add the validators to the ",(0,a.kt)("inlineCode",{parentName:"p"},"description")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"complete"),"\nproperties:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Mission.ts",title:"Mission.ts"},'import { IsString, IsNotEmpty, IsBoolean } from "class-validator";\n\nexport class Mission {\n  id?: number;\n\n  //highlight-start\n  @IsString({ message: "description must be a string" })\n  @IsNotEmpty({ message: "description must not be an empty string" })\n  //highlight-end\n  description: string;\n\n  //highlight-next-line\n  @IsBoolean({ message: "complete must be a boolean" })\n  complete: boolean;\n  created: string;\n}\n')),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'@IsString, IsNotEmpty, and IsBoolean are imported from "class-validator"')),(0,a.kt)("p",null,"Each decorator takes a set of options, and we can set the error message we\nwant to use if the validation fails."),(0,a.kt)("p",null,"Now that the decorators are in place, how do we use them? Nest has\nanother piece of middleware known as ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/pipes"},"pipes"),"\n(similar to the guards which we used above) whose job is to inspect incoming\nrequests and provide validation and transformation to the request. You can see\nan example of how one is built\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/pipes#class-validator"},"here"),". However, Nest already has\na built-in\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/pipes#the-built-in-validationpipe"},"ValidationPipe"),",\nwhich does exactly what we need it to."),(0,a.kt)("p",null,"We'll want every API request to be run through the ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationPipe"),", so instead\nof granularly applying it to methods as we did above with ",(0,a.kt)("inlineCode",{parentName:"p"},"@UseGuards()"),",\nwe'll configure it in the app module. Update the ",(0,a.kt)("strong",{parentName:"p"},"src/app.module.ts")," file to\nadd a new item in the providers array:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/app.module.ts",title:"src/app.module.ts"},"@Module({\n  imports: [],\n  controllers: [AppController, MissionsController],\n  providers: [\n    AppService,\n    MissionsService,\n    //highlight-start\n    {\n      provide: APP_PIPE,\n      useValue: new ValidationPipe({ transform: true }),\n    },\n    //highlight-end\n  ],\n})\nexport class AppModule {}\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'APP_PIPE is imported from "@nestjs/core" and ValidationPipe is imported from\n"@nestjs/common"')),(0,a.kt)("p",null,"This will instruct Nest that anytime a request is made to run the request\nthrough ",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationPipe"),", which will parse the request body, convert it to an instance of the ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," class, and run any validators on it through\n",(0,a.kt)("inlineCode",{parentName:"p"},"class-validator"),". If validation fails, then it will return back a 400 status\ncode."),(0,a.kt)("p",null,"With all that in place, our test should now pass."),(0,a.kt)("p",null,"You might have noticed that we passed in ",(0,a.kt)("inlineCode",{parentName:"p"},"{transform: true}")," as an option to the\n",(0,a.kt)("inlineCode",{parentName:"p"},"ValidationPipe")," class. This will convert any values to how they are typed in\nTypeScript on its way in. This means that we can now remove any of those\n",(0,a.kt)("inlineCode",{parentName:"p"},"ParseIntPipes")," were being used to convert the ids into strings. Go ahead\nand do so and you'll see that all the tests still pass!"),(0,a.kt)("h2",{id:"exclude-properties"},"Exclude properties"),(0,a.kt)("p",null,"Okay, one last cool trick to show you before we wrap up is introducing\nthe concept of ",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/interceptors"},"Nest Interceptors"),". An\ninterceptor is another piece of specialized middleware, and its purpose is to\ntransform any responses on their way out (opposite of a pipe)."),(0,a.kt)("p",null,"In our ",(0,a.kt)("inlineCode",{parentName:"p"},"Mission")," class, we've had the created date that shows when the mission\nwas added. Let's pretend this info is only somewhat valuable to the clients of\nthe API, and we want to remove it before it gets sent out."),(0,a.kt)("p",null,"Add another check to the 'should get single mission' test to make sure the\nthe property comes back undefined:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'it("should get single mission", () => {\n  cy.api("/missions/1").as("response");\n  cy.get("@response").its("status").should("equal", 200);\n  cy.get("@response").its("body").should("include", {\n    id: 1,\n    description: "save the galaxy",\n    complete: false,\n  });\n  //highlight-next-line\n  cy.get("@response").its("body.created").should("be.undefined");\n});\n')),(0,a.kt)("p",null,"The test will currently fail because ",(0,a.kt)("inlineCode",{parentName:"p"},"created")," comes back."),(0,a.kt)("p",null,"To exclude the property, we can use the ",(0,a.kt)("inlineCode",{parentName:"p"},"@Exclude()")," decorator from\n",(0,a.kt)("inlineCode",{parentName:"p"},"class-transformer"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=Mission.ts",title:"Mission.ts"},"@Exclude()\ncreate: string;\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'Exclude is imported from "class-transformer"')),(0,a.kt)("p",null,"When a class is run through ",(0,a.kt)("inlineCode",{parentName:"p"},"class-validator"),", it will convert the object into a\nplain JavaScript object and run any transformations on it (such as excluding\nproperties). We can use the the built-in\n",(0,a.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/techniques/serialization"},(0,a.kt)("inlineCode",{parentName:"a"},"ClassSerializerInterceptor")),"\nfrom Nest to do this for us."),(0,a.kt)("p",null,"To use the interceptor, add another provider to the app module:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=app.module.ts",title:"app.module.ts"},"providers: [\n  AppService,\n  MissionsService,\n  {\n    provide: APP_PIPE,\n    useValue: new ValidationPipe({ transform: true }),\n  },\n  //highlight-start\n  {\n    provide: APP_INTERCEPTOR,\n    useClass: ClassSerializerInterceptor,\n  },\n  //highlight-end\n],\n")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},'APP_INTERCEPTOR is imported from "@nestjs/core" and ClassSerializerInterceptor\nis imported from "@nestjs/common"')),(0,a.kt)("p",null,"Now the 'should get single mission' test should pass again."),(0,a.kt)("h2",{id:"conclusion"},"Conclusion"),(0,a.kt)("p",null,"Thanks for taking the time to work through this tutorial. Hopefully, I showed\nyou how to get up and running with Nest quickly and how to use Cypress with the\nCypress API Plugin as a development aid while building out your API. The extra benefit is that you also have a set of repeatable tests to run to\nensure your API functions as it should."),(0,a.kt)("p",null,"Feel free to hit me up on Twitter ",(0,a.kt)("a",{parentName:"p",href:"https://twitter.com/jordanpowell88"},"@jordanpowell88")," if you have any questions."),(0,a.kt)("p",null,"Happy Coding!"))}c.isMDXComponent=!0}}]);