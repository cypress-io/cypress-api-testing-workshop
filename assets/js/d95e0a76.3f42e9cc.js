"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[701],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var s=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,s)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function a(e,t){if(null==e)return{};var n,s,r=function(e,t){if(null==e)return{};var n,s,r={},i=Object.keys(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(s=0;s<i.length;s++)n=i[s],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=s.createContext({}),p=function(e){var t=s.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return s.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},u=s.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=a(e,["components","mdxType","originalType","parentName"]),u=p(n),m=r,h=u["".concat(l,".").concat(m)]||u[m]||d[m]||i;return n?s.createElement(h,o(o({ref:t},c),{},{components:n})):s.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=u;var a={};for(var l in t)hasOwnProperty.call(t,l)&&(a[l]=t[l]);a.originalType=e,a.mdxType="string"==typeof e?e:r,o[1]=a;for(var p=2;p<i;p++)o[p]=n[p];return s.createElement.apply(null,o)}return s.createElement.apply(null,n)}u.displayName="MDXCreateElement"},4828:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>d,frontMatter:()=>i,metadata:()=>a,toc:()=>p});var s=n(7462),r=(n(7294),n(3905));const i={title:"Writing Your First Test",slug:"/writing-your-first-test"},o=void 0,a={unversionedId:"writing-your-first-test",id:"writing-your-first-test",title:"Writing Your First Test",description:"Writing Your First Test",source:"@site/docs/writing-your-first-test.md",sourceDirName:".",slug:"/writing-your-first-test",permalink:"/cypress-api-testing/writing-your-first-test",draft:!1,tags:[],version:"current",frontMatter:{title:"Writing Your First Test",slug:"/writing-your-first-test"},sidebar:"tutorialSidebar",previous:{title:"Getting Started",permalink:"/cypress-api-testing/getting-started"},next:{title:"CRUD",permalink:"/cypress-api-testing/crud"}},l={},p=[{value:"Writing Your First Test",id:"writing-your-first-test",level:2},{value:"Getting Missions",id:"getting-missions",level:2},{value:"Nest Missions Controller",id:"nest-missions-controller",level:3},{value:"Nest Missions Service",id:"nest-missions-service",level:3}],c={toc:p};function d(e){let{components:t,...i}=e;return(0,r.kt)("wrapper",(0,s.Z)({},c,i,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"writing-your-first-test"},"Writing Your First Test"),(0,r.kt)("p",null,"Open up the ",(0,r.kt)("strong",{parentName:"p"},"cypress/e2e/missions.cy.ts")," file and replace its contents with\nthe following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=cypress/e2e/missions.cy.ts",title:"cypress/e2e/missions.cy.ts"},'describe("missions api", () => {\n  it("should get missions", () => {\n    cy.api({\n      method: "GET",\n      url: "/missions",\n    }).as("response");\n    cy.get("@response").its("status").should("equal", 200);\n  });\n});\n')),(0,r.kt)("p",null,"Our first test (denoted in the ",(0,r.kt)("inlineCode",{parentName:"p"},"it()")," block) will use the ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.api()")," method\n(provided by the ",(0,r.kt)("inlineCode",{parentName:"p"},"cypress-plugin-api"),' package) to make a request to the\n"/missions" endpoint. We\'ll use the\n',(0,r.kt)("a",{parentName:"p",href:"https://docs.cypress.io/api/commands/as"},(0,r.kt)("inlineCode",{parentName:"a"},"as()"))," method to\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.cypress.io/guides/core-concepts/variables-and-aliases"},"alias")," the\nresult of the request. Aliasing in Cypress is how we store variables to\naccess them later."),(0,r.kt)("p",null,"Which is exactly what we do on the next line. The ",(0,r.kt)("inlineCode",{parentName:"p"},"cy.get('@response')")," call\nget's the response variable, and the ",(0,r.kt)("inlineCode",{parentName:"p"},"its(status)"),' call gets the status property\non the response object. This is the HTTP status code returned back from the API.\nIn the test, we want to verify that the code returned 200 for a successful\ncall. We might consider this the "it works!" of API tests.'),(0,r.kt)("p",null,"Save the spec and go back to the Cypress test browser. The spec will fail, but\nwe expected it to since we have yet to implement any API. Let's\ndo so now!"),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"The Missions API Spec Failed",src:n(3588).Z,width:"2560",height:"1440"})),(0,r.kt)("h2",{id:"getting-missions"},"Getting Missions"),(0,r.kt)("h3",{id:"nest-missions-controller"},"Nest Missions Controller"),(0,r.kt)("p",null,"Now, let's start to build out the API. The first thing we will need is a Nest\ncontroller. Controllers are responsible for listening and responding to HTTP\nrequests. We can use the Nest CLI to generate a missions controller for us:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nest g controller missions\n")),(0,r.kt)("p",null,"Now we have a basic controller scaffolded at\n",(0,r.kt)("strong",{parentName:"p"},"src/missions/missions.controller.ts"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=missions.controller.ts",title:"missions.controller.ts"},'import { Controller } from "@nestjs/common";\n\n@Controller("missions")\nexport class MissionsController {}\n')),(0,r.kt)("p",null,"Controllers are plain JavaScript objects that are decorated with the\n",(0,r.kt)("inlineCode",{parentName:"p"},"@Controller")," decorator. The decorator adds meta-data to the class that the\nframework uses to determine which controller will respond to which HTTP\nrequest. In this case, the ",(0,r.kt)("inlineCode",{parentName:"p"},"MissionsController"),' will respond to requests\nthat go to the "/missions" route (denoted by the parameter passed into the\ncontroller).'),(0,r.kt)("p",null,"The Nest CLI also modified the ",(0,r.kt)("strong",{parentName:"p"},"app.module.ts")," file for us, adding in the\n",(0,r.kt)("inlineCode",{parentName:"p"},"MissionsController")," to the controller's array."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=app.module.ts",title:"app.module.ts"},"@Module({\n  imports: [],\n  // highlight-next-line\n  controllers: [AppController, MissionsController],\n  providers: [AppService],\n})\nexport class AppModule {}\n")),(0,r.kt)("p",null,"Our first API will be to return back a list of missions. Let's start simple and\nreturn back a hard-coded array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"@Get()\ngetList() {\n  return [\n    {\n      description: 'save the world',\n      complete: false,\n    },\n  ];\n}\n")),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"@Get()")," decorator instructs Nest that the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList()")," method will respond\nto HTTP GET methods. What gets returned from the method is what will be in the\nresponse's body, automatically serialized as JSON. We can return something\nsynchronous as we do above, or if we return an async value (like a promise or\nRXJS observable), then the value yielded from the async response will be in the\nbody."),(0,r.kt)("p",null,'Back in the test runner, hit the "Run all specs" button to try the test again.\nThis time the test will pass:'),(0,r.kt)("p",null,(0,r.kt)("img",{alt:"Run all tests",src:n(4074).Z,width:"3584",height:"2082"})),(0,r.kt)("p",null,"On the right, we can see the results and browse through the returned response (our hard-coded missions array), the headers, and cookies."),(0,r.kt)("p",null,"Great stuff, but we normally don't return back hard coded data. Much like\nAngular, Nest has the concept of services that are responsible for any type of\nbusiness logic and communicating with other systems."),(0,r.kt)("h3",{id:"nest-missions-service"},"Nest Missions Service"),(0,r.kt)("p",null,"Instead of using the hard-coded array, we will create a service\nresponsible for handling all the mission data. Run the following command to\ncreate a new service from the Nest CLI:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"nest g service missions\n")),(0,r.kt)("p",null,"This will create a ",(0,r.kt)("strong",{parentName:"p"},"missions.service.ts")," file for us:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/missions/missions.service.ts",title:"src/missions/missions.service.ts"},'import { Injectable } from "@nestjs/common";\n\n@Injectable()\nexport class MissionsService {}\n')),(0,r.kt)("p",null,"A service is a JavaScript class marked with a decorator like a controller.\nAngular devs will find Nest services very similar to their NG counterparts.\nUnlike an Angular service, though, Nest doesn't have a ",(0,r.kt)("inlineCode",{parentName:"p"},"providedIn")," option, so\nthe service has to be registered in a module (which the CLI already added to the app\nmodule for us)."),(0,r.kt)("p",null,"Let's refactor the code and return the missions from the service instead. First\nupdate the service with the following:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:"title=src/missions/missions.service.ts",title:"src/missions/missions.service.ts"},'import { Injectable } from "@nestjs/common";\n\nexport interface Mission {\n  id?: number;\n  description: string;\n  complete: boolean;\n}\n\nconst defaultMission: Mission = {\n  id: 1,\n  description: "save the galaxy",\n  complete: false,\n};\n\n@Injectable()\nexport class MissionsService {\n  missions: Mission[] = [{ ...defaultMission }];\n\n  getList() {\n    return this.missions;\n  }\n}\n')),(0,r.kt)("p",null,"Above, we first define a ",(0,r.kt)("inlineCode",{parentName:"p"},"Mission")," interface that will be the data structure for\nthe missions. It will have an ",(0,r.kt)("inlineCode",{parentName:"p"},"id")," with an optional type of number, a\n",(0,r.kt)("inlineCode",{parentName:"p"},"description")," with a type of string, a ",(0,r.kt)("inlineCode",{parentName:"p"},"complete")," with a type of boolean, and a\n",(0,r.kt)("inlineCode",{parentName:"p"},"created")," with a type of string that will contain an ISO date string of when the mission was added."),(0,r.kt)("p",null,"Next, we define a default mission we will use to seed the database.\nSpeaking of databases, to keep things simple, we won't be using a real one here. Instead, we'll be using an in-memory array that I'll lovingly refer to as\nArrayDB\u2122\ufe0f. Therefore, each time we update the Nest app and it\nrecompiles/relaunches, we'll lose any modifications. Thus, we'll set the array\nto contain the ",(0,r.kt)("inlineCode",{parentName:"p"},"defaultMission")," when the service initializes. In a real app, we\nwould instead call into a data layer or ORM like ",(0,r.kt)("a",{parentName:"p",href:"https://typeorm.io/"},"TypeORM"),"\nor ",(0,r.kt)("a",{parentName:"p",href:"https://www.prisma.io/"},"Prisma")," to manage data."),(0,r.kt)("p",null,"The ",(0,r.kt)("inlineCode",{parentName:"p"},"getList()")," method returns everything currently in the array."),(0,r.kt)("p",null,"Next, update the controller to get a reference to the service via\n",(0,r.kt)("a",{parentName:"p",href:"https://docs.nestjs.com/fundamentals/custom-providers#di-fundamentals"},"dependency injection"),"\n(just like Angular!). Then, update the ",(0,r.kt)("inlineCode",{parentName:"p"},"getList")," method to return the call from\nthe service instead of the hard-coded array:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},'import { Controller, Get } from "@nestjs/common";\nimport { MissionsService } from "./missions.service";\n\n@Controller("missions")\nexport class MissionsController {\n  constructor(private missionsService: MissionsService) {}\n\n  @Get()\n  getList() {\n    return this.missionsService.getList();\n  }\n}\n')),(0,r.kt)("p",null,'Now we can rerun the test, and if we see the description of the mission come\nback as "save the galaxy" (versus "save the world"), we know the API is\nreturning data back from the service.'))}d.isMDXComponent=!0},3588:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/missions_fail-a136ff53c9d432e64b1c7ea01ab2672c.jpg"},4074:(e,t,n)=>{n.d(t,{Z:()=>s});const s=n.p+"assets/images/run_all_tests-9bab9f0223002d2b67dd40d8278311fa.jpg"}}]);